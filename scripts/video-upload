#!/usr/bin/env ruby
require 'English'
require 'awesome_print'
require 'date'
require 'fileutils'
require 'json'
require 'shellwords'

# Upload videos to Youtube
# Usage:
# $ video-upload /path/to/files
#     --title       : Name of the video. Defaults to the filename
#     --description : Description of the video, usually the game name
#     --tags        : Comma separated list of tags
#     --playlist    : Name of the playlist
class VideoUpload
  def initialize(*args)
    @default_title = get_named_arg(args, 'title')
    @default_description = get_named_arg(args, 'description')
    @default_tags = get_named_arg(args, 'tags')
    @default_playlist = get_named_arg(args, 'playlist')
    @client_secret = File.expand_path('./_client_secret_youtube.json')
    @directory = directory(args)
    @inputs = Dir["#{@directory}/*.mp4"].sort

    if @default_playlist == ''
      puts 'You need to specify the playlist name'
      puts 'Usage:'
      puts "`--playlist 'Playlist name'"
      exit 1
    end

    unless File.exist?(@client_secret)
      puts "Unable to find #{@client_secret}"
      exit 1
    end
  end

  # Returns the directory where to look for videos from the arguments
  def directory(args)
    args.map! do |file|
      File.expand_path(file)
    end

    args.select! do |file|
      File.exist?(file)
    end
    args[0]
  end

  # Find the value of a named --argument
  def get_named_arg(args, name)
    args.each_with_index do |arg, index|
      return args[index + 1] if arg == "--#{name}"
    end
    ''
  end

  def get_recording_date(filename)
    basename = File.basename(filename, File.extname(filename))
    year = "20#{basename[0..1]}".to_i
    month = basename[2..3].to_i
    day = basename[4..5].to_i
    hour = basename[7..8].to_i
    minute = basename[9..10].to_i
    date = DateTime.new(year, month, day, hour, minute)

    date.strftime('%Y-%m-%dT%H:%M:00.0Z')
  end

  def read_done_list
    done_file = File.join(@directory, 'done.txt')

    # Return an empty hash if no such file
    return {} unless File.exist?(done_file)

    # Read the file content
    JSON.parse(File.open(done_file, 'rb').read)
  end

  # Adds a new youtube id to the list of done files
  def add_done_file(name, id)
    done_list = read_done_list
    done_list[name] = id

    done_file = File.join(@directory, 'done.txt')
    File.open(done_file, 'w') do |file|
      file.write(JSON.pretty_generate(done_list))
    end

    # Write a .youtube file with the id as content
    basename = File.basename(name, File.extname(name))
    File.write(File.join(@directory, "#{basename}.youtube"), id)
  end

  def run
    done_list = read_done_list
    has_failed_attempt = false

    @inputs.each do |video|
      file_basename = File.basename(video).shellescape
      puts '=========='
      puts "Filename: #{file_basename}"

      # Skip files that are already processed in a previous run
      if done_list.key?(file_basename)
        puts 'SKIP, ALREADY DONE'
        next
      end

      title = @default_title == '' ? file_basename : @default_title
      description = @default_description.shellescape
      tags = @default_tags.shellescape
      playlist = @default_playlist.shellescape
      client_secret = @client_secret.shellescape
      recording_date = get_recording_date(video)

      compressed_file_size = File.size(video).to_f / 2**20
      formatted_file_size = '%.2f' % compressed_file_size

      puts "Filesize: #{formatted_file_size}MB"

      options = [
        "--title=#{title}",
        "--description=#{description}",
        "--tags=#{tags}",
        "--playlist=#{playlist}",
        '--category=Gaming',
        '--default-language="en"',
        '--default-audio-language="en"',
        "--client-secrets=#{client_secret}",
        "--recording-date='#{recording_date}'",
        video.shellescape
      ]

      command = "youtube-upload #{options.join(' ')}"
      puts "Command: #{command}"
      video_id = `#{command}`.strip
      is_error = $CHILD_STATUS.exitstatus > 0

      # No error, we update the list of done files
      unless is_error
        puts "✓ SUCCESS"
        add_done_file(title, video_id)
        next
      end

      puts '⚠ ERROR'
      puts "Unable to push #{title}"
      has_failed_attempt = true
    end

    # If afterward we still have failed attempts, we start again
    run if has_failed_attempt
  end
end
VideoUpload.new(*ARGV).run
